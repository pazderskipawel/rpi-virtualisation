# Home Assistant OS configuration and onboarding

- name: Wait for VM to boot and get DHCP address
  ansible.builtin.pause:
    seconds: 60

- name: Get VM IP from network DHCP status
  shell: |
    cat /var/lib/libvirt/dnsmasq/virbr_{{ network_name }}.status | grep -oP '"ip-address":\s*"\K[^"]+' | head -1
  register: vm_ip_status
  retries: 30
  delay: 10
  until: vm_ip_status.stdout != ""
  changed_when: false

- name: Set VM IP
  ansible.builtin.set_fact:
    vm_ip_address: "{{ vm_ip_status.stdout }}"

- name: Display detected IP
  ansible.builtin.debug:
    msg: "Home Assistant VM IP: {{ vm_ip_address }}"

- name: Wait for Home Assistant API (first boot takes 15-20 min)
  ansible.builtin.uri:
    url: "http://{{ vm_ip_address }}:8123/api/onboarding"
    method: GET
    status_code: 200
    timeout: 5
  register: onboarding_check
  until: onboarding_check.status == 200
  retries: 120
  delay: 10

- name: Create admin user
  ansible.builtin.uri:
    url: "http://{{ vm_ip_address }}:8123/api/onboarding/users"
    method: POST
    body_format: json
    body:
      client_id: "http://{{ vm_ip_address }}:8123"
      name: "Administrator"
      username: "{{ ha_admin_username }}"
      password: "{{ ha_admin_password }}"
      language: "en"
    status_code: [200, 400]
  register: user_created
  failed_when: false

- name: Save auth token
  ansible.builtin.set_fact:
    ha_auth_token: "{{ user_created.json.auth_token | default('') }}"
  when: 
    - user_created.status is defined
    - user_created.status == 200

- name: Complete onboarding
  ansible.builtin.uri:
    url: "http://{{ vm_ip_address }}:8123/api/onboarding/integration"
    method: POST
    body_format: json
    body: {}
    headers:
      Authorization: "Bearer {{ ha_auth_token }}"
    status_code: [200, 400]
  when: ha_auth_token is defined and ha_auth_token != ''
  failed_when: false

- name: Wait for configuration to be loaded
  ansible.builtin.pause:
    seconds: 10

- name: Shutdown VM for configuration
  ansible.builtin.shell: |
    virsh -c qemu:///system shutdown {{ vm_name }}
  failed_when: false

- name: Wait for VM to completely stop
  ansible.builtin.shell: |
    virsh -c qemu:///system domstate {{ vm_name }}
  register: vm_state
  until: vm_state.stdout == "wyłączone" # system is in Polish
  retries: 10
  delay: 15
  changed_when: false

- name: Copy configuration.yaml to VM
  ansible.builtin.shell: |
    virt-copy-in -d {{ vm_name }} -m /dev/sda8:/ {{ role_path }}/files/configuration.yaml /supervisor/homeassistant/
  #
  # configuration file is in homeassistant-data partition in supervisor/homeassistant directory
  #
  #  rpi@rpi:~ $ virt-filesystems -c qemu:///system -d haos -l
  #  Name      Type       VFS      Label          Size       Parent
  # ...
  #  /dev/sda8 filesystem ext4     hassos-data    5582213120 -
  #  rpi@rpi:~ $ virt-ls -c qemu:///system -d haos -m /dev/sda8 /supervisor/homeassistant
  #  ...
  #  configuration.yaml
  #  ...
  #
  
- name: Start VM with configuration deployed
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
    uri: "qemu:///system"

- name: Verify proxy access works
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:8123/api/"
    method: GET
    status_code: [200, 401]
    timeout: 10
  register: proxy_test
  retries: 10
  delay: 10
  failed_when: false

- name: Display completion info
  ansible.builtin.debug:
    msg:
      - "=========================================="
      - "Home Assistant Setup Complete!"
      - "=========================================="
      - "Direct VM Access: http://{{ vm_ip_address }}:8123"
      - "Nginx Proxy Access: http://{{ ansible_default_ipv4.address }}:8123"
      - "Username: {{ ha_admin_username }}"
      - ""
      - "Proxy Status: {{ 'Working!' if proxy_test.status | default(0) in [200, 401] else 'Check manually' }}"
